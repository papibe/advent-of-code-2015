import pytest

from part1 import get_order, solution


@pytest.mark.parametrize(
    "row,col,expected",
    [
        (1, 1, 1),
        (1, 2, 3),
        (1, 3, 6),
        (1, 4, 10),
        (1, 5, 15),
        (1, 6, 21),
        (2, 1, 2),
        (2, 2, 5),
        (2, 3, 9),
        (2, 4, 14),
        (2, 5, 20),
        (3, 1, 4),
        (3, 2, 8),
        (3, 3, 13),
        (3, 4, 19),
        (4, 1, 7),
        (4, 2, 12),
        (4, 3, 18),
        (5, 1, 11),
        (5, 2, 17),
        (6, 1, 16),
    ],
    ids=[
        "at (1, 1) should be 1",
        "at (1, 2) should be 3",
        "at (1, 3) should be 6",
        "at (1, 4) should be 10",
        "at (1, 5) should be 15",
        "at (1, 6) should be 21",
        "at (2, 1) should be 2",
        "at (2, 2) should be 5",
        "at (2, 3) should be 9",
        "at (2, 4) should be 14",
        "at (2, 5) should be 20",
        "at (3, 1) should be 4",
        "at (3, 2) should be 8",
        "at (3, 3) should be 13",
        "at (3, 4) should be 19",
        "at (4, 1) should be 7",
        "at (4, 2) should be 12",
        "at (4, 3) should be 18",
        "at (5, 1) should be 11",
        "at (5, 2) should be 17",
        "at (6, 1) should be 16",
    ],
)
def test_position(row: int, col: int, expected: int) -> None:
    result: int = get_order(row, col)
    assert result == expected, f"got {result}, needs {expected}"


@pytest.mark.parametrize(
    "row,col,expected",
    [
        (1, 1, 20151125),
        (1, 2, 18749137),
        (1, 3, 17289845),
        (1, 4, 30943339),
        (1, 5, 10071777),
        (1, 6, 33511524),
        (2, 1, 31916031),
        (2, 2, 21629792),
        (2, 3, 16929656),
        (2, 4, 7726640),
        (2, 5, 15514188),
        (2, 6, 4041754),
        (3, 1, 16080970),
        (3, 2, 8057251),
        (3, 3, 1601130),
        (3, 4, 7981243),
        (3, 5, 11661866),
        (3, 6, 16474243),
        (4, 1, 24592653),
        (4, 2, 32451966),
        (4, 3, 21345942),
        (4, 4, 9380097),
        (4, 5, 10600672),
        (4, 6, 31527494),
        (5, 1, 77061),
        (5, 2, 17552253),
        (5, 3, 28094349),
        (5, 4, 6899651),
        (5, 5, 9250759),
        (5, 6, 31663883),
        (6, 1, 33071741),
        (6, 2, 6796745),
        (6, 3, 25397450),
        (6, 4, 24659492),
        (6, 5, 1534922),
        (6, 6, 27995004),
    ],
    ids=[
        "(1, 1) should be 20151125)",
        "(1, 2) should be 18749137)",
        "(1, 3) should be 17289845)",
        "(1, 4) should be 30943339)",
        "(1, 5) should be 10071777)",
        "(1, 6) should be 33511524)",
        "(2, 1) should be 31916031)",
        "(2, 2) should be 21629792)",
        "(2, 3) should be 16929656)",
        "(2, 4) should be 7726640)",
        "(2, 5) should be 15514188)",
        "(2, 6) should be 4041754)",
        "(3, 1) should be 16080970)",
        "(3, 2) should be 8057251)",
        "(3, 3) should be 1601130)",
        "(3, 4) should be 7981243)",
        "(3, 5) should be 11661866)",
        "(3, 6) should be 16474243)",
        "(4, 1) should be 24592653)",
        "(4, 2) should be 32451966)",
        "(4, 3) should be 21345942)",
        "(4, 4) should be 9380097)",
        "(4, 5) should be 10600672)",
        "(4, 6) should be 31527494)",
        "(5, 1) should be 77061)",
        "(5, 2) should be 17552253)",
        "(5, 3) should be 28094349)",
        "(5, 4) should be 6899651)",
        "(5, 5) should be 9250759)",
        "(5, 6) should be 31663883)",
        "(6, 1) should be 33071741)",
        "(6, 2) should be 6796745)",
        "(6, 3) should be 25397450)",
        "(6, 4) should be 24659492)",
        "(6, 5) should be 1534922)",
        "(6, 6) should be 27995004)",
    ],
)
def test_solution(row: int, col: int, expected: int) -> None:
    result: int = solution(row, col)
    assert result == expected, f"got {result}, needs {expected}"
